// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/v1/tracker/items.proto

package tracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Items_GetItems_FullMethodName       = "/api.v1.tracker.Items/GetItems"
	Items_GetItemsStream_FullMethodName = "/api.v1.tracker.Items/GetItemsStream"
	Items_GetItem_FullMethodName        = "/api.v1.tracker.Items/GetItem"
	Items_CreateItem_FullMethodName     = "/api.v1.tracker.Items/CreateItem"
	Items_UpdateItem_FullMethodName     = "/api.v1.tracker.Items/UpdateItem"
	Items_DeleteItem_FullMethodName     = "/api.v1.tracker.Items/DeleteItem"
	Items_NewRealisation_FullMethodName = "/api.v1.tracker.Items/NewRealisation"
)

// ItemsClient is the client API for Items service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsClient interface {
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	GetItemsStream(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (Items_GetItemsStreamClient, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*Item, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Item, error)
	DeleteItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	NewRealisation(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Realisation, error)
}

type itemsClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsClient(cc grpc.ClientConnInterface) ItemsClient {
	return &itemsClient{cc}
}

func (c *itemsClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, Items_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) GetItemsStream(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (Items_GetItemsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Items_ServiceDesc.Streams[0], Items_GetItemsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &itemsGetItemsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Items_GetItemsStreamClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type itemsGetItemsStreamClient struct {
	grpc.ClientStream
}

func (x *itemsGetItemsStreamClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *itemsClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, Items_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, Items_CreateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, Items_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) DeleteItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, Items_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsClient) NewRealisation(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Realisation, error) {
	out := new(Realisation)
	err := c.cc.Invoke(ctx, Items_NewRealisation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsServer is the server API for Items service.
// All implementations must embed UnimplementedItemsServer
// for forward compatibility
type ItemsServer interface {
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	GetItemsStream(*GetItemsRequest, Items_GetItemsStreamServer) error
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	CreateItem(context.Context, *CreateItemRequest) (*Item, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*Item, error)
	DeleteItem(context.Context, *GetItemRequest) (*Item, error)
	NewRealisation(context.Context, *GetItemRequest) (*Realisation, error)
	mustEmbedUnimplementedItemsServer()
}

// UnimplementedItemsServer must be embedded to have forward compatible implementations.
type UnimplementedItemsServer struct {
}

func (UnimplementedItemsServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedItemsServer) GetItemsStream(*GetItemsRequest, Items_GetItemsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetItemsStream not implemented")
}
func (UnimplementedItemsServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedItemsServer) CreateItem(context.Context, *CreateItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedItemsServer) UpdateItem(context.Context, *UpdateItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedItemsServer) DeleteItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedItemsServer) NewRealisation(context.Context, *GetItemRequest) (*Realisation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRealisation not implemented")
}
func (UnimplementedItemsServer) mustEmbedUnimplementedItemsServer() {}

// UnsafeItemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsServer will
// result in compilation errors.
type UnsafeItemsServer interface {
	mustEmbedUnimplementedItemsServer()
}

func RegisterItemsServer(s grpc.ServiceRegistrar, srv ItemsServer) {
	s.RegisterService(&Items_ServiceDesc, srv)
}

func _Items_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_GetItemsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ItemsServer).GetItemsStream(m, &itemsGetItemsStreamServer{stream})
}

type Items_GetItemsStreamServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type itemsGetItemsStreamServer struct {
	grpc.ServerStream
}

func (x *itemsGetItemsStreamServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _Items_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).CreateItem(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).DeleteItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Items_NewRealisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsServer).NewRealisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Items_NewRealisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsServer).NewRealisation(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Items_ServiceDesc is the grpc.ServiceDesc for Items service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Items_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.tracker.Items",
	HandlerType: (*ItemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItems",
			Handler:    _Items_GetItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _Items_GetItem_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _Items_CreateItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Items_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Items_DeleteItem_Handler,
		},
		{
			MethodName: "NewRealisation",
			Handler:    _Items_NewRealisation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetItemsStream",
			Handler:       _Items_GetItemsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/tracker/items.proto",
}
