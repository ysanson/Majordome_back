// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: api/v1/tracker/items.proto

package tracker

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationItemsCreateItem = "/api.v1.tracker.Items/CreateItem"
const OperationItemsDeleteItem = "/api.v1.tracker.Items/DeleteItem"
const OperationItemsGetItem = "/api.v1.tracker.Items/GetItem"
const OperationItemsGetItems = "/api.v1.tracker.Items/GetItems"
const OperationItemsNewRealisation = "/api.v1.tracker.Items/NewRealisation"
const OperationItemsUpdateItem = "/api.v1.tracker.Items/UpdateItem"

type ItemsHTTPServer interface {
	CreateItem(context.Context, *CreateItemRequest) (*Item, error)
	DeleteItem(context.Context, *GetItemRequest) (*Item, error)
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	NewRealisation(context.Context, *GetItemRequest) (*Realisation, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*Item, error)
}

func RegisterItemsHTTPServer(s *http.Server, srv ItemsHTTPServer) {
	r := s.Route("/")
	r.GET("/items?page={page}&per_page={per_page}", _Items_GetItems0_HTTP_Handler(srv))
	r.GET("/items/{id}", _Items_GetItem0_HTTP_Handler(srv))
	r.POST("/items", _Items_CreateItem0_HTTP_Handler(srv))
	r.PUT("/items/{id}", _Items_UpdateItem0_HTTP_Handler(srv))
	r.DELETE("/items/{id}", _Items_DeleteItem0_HTTP_Handler(srv))
	r.POST("/items/{id}/realisations", _Items_NewRealisation0_HTTP_Handler(srv))
}

func _Items_GetItems0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsGetItems)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetItems(ctx, req.(*GetItemsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetItemsResponse)
		return ctx.Result(200, reply)
	}
}

func _Items_GetItem0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsGetItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetItem(ctx, req.(*GetItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Item)
		return ctx.Result(200, reply)
	}
}

func _Items_CreateItem0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsCreateItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateItem(ctx, req.(*CreateItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Item)
		return ctx.Result(200, reply)
	}
}

func _Items_UpdateItem0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsUpdateItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateItem(ctx, req.(*UpdateItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Item)
		return ctx.Result(200, reply)
	}
}

func _Items_DeleteItem0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsDeleteItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteItem(ctx, req.(*GetItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Item)
		return ctx.Result(200, reply)
	}
}

func _Items_NewRealisation0_HTTP_Handler(srv ItemsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemsNewRealisation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NewRealisation(ctx, req.(*GetItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Realisation)
		return ctx.Result(200, reply)
	}
}

type ItemsHTTPClient interface {
	CreateItem(ctx context.Context, req *CreateItemRequest, opts ...http.CallOption) (rsp *Item, err error)
	DeleteItem(ctx context.Context, req *GetItemRequest, opts ...http.CallOption) (rsp *Item, err error)
	GetItem(ctx context.Context, req *GetItemRequest, opts ...http.CallOption) (rsp *Item, err error)
	GetItems(ctx context.Context, req *GetItemsRequest, opts ...http.CallOption) (rsp *GetItemsResponse, err error)
	NewRealisation(ctx context.Context, req *GetItemRequest, opts ...http.CallOption) (rsp *Realisation, err error)
	UpdateItem(ctx context.Context, req *UpdateItemRequest, opts ...http.CallOption) (rsp *Item, err error)
}

type ItemsHTTPClientImpl struct {
	cc *http.Client
}

func NewItemsHTTPClient(client *http.Client) ItemsHTTPClient {
	return &ItemsHTTPClientImpl{client}
}

func (c *ItemsHTTPClientImpl) CreateItem(ctx context.Context, in *CreateItemRequest, opts ...http.CallOption) (*Item, error) {
	var out Item
	pattern := "/items"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationItemsCreateItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ItemsHTTPClientImpl) DeleteItem(ctx context.Context, in *GetItemRequest, opts ...http.CallOption) (*Item, error) {
	var out Item
	pattern := "/items/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationItemsDeleteItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ItemsHTTPClientImpl) GetItem(ctx context.Context, in *GetItemRequest, opts ...http.CallOption) (*Item, error) {
	var out Item
	pattern := "/items/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationItemsGetItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ItemsHTTPClientImpl) GetItems(ctx context.Context, in *GetItemsRequest, opts ...http.CallOption) (*GetItemsResponse, error) {
	var out GetItemsResponse
	pattern := "/items?page={page}&per_page={per_page}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationItemsGetItems))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ItemsHTTPClientImpl) NewRealisation(ctx context.Context, in *GetItemRequest, opts ...http.CallOption) (*Realisation, error) {
	var out Realisation
	pattern := "/items/{id}/realisations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationItemsNewRealisation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ItemsHTTPClientImpl) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...http.CallOption) (*Item, error) {
	var out Item
	pattern := "/items/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationItemsUpdateItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
